<tool id="pepr" name="Run PePr">
  <description>ChIP-Seq Peak-calling and Prioritization pipeline (PePr)</description>
    <macros>      
        <import>methylsig_macros.xml</import>
    </macros>
  <command interpreter="python">
	runpepr_Mac.py
	 #for $i, $s in enumerate( $input_files )
	    --o "$i"
	    --i ${s.input.file_name}
	    --c ${s.chip.file_name}   
	#end for	
	   --expName ${expName}
           --format ${format}
	   --peakType ${peaktype}
           --thresh ${t}
	   --removeArt ${remove_artefacts}
	   --rd_dup ${remove_duplicate}
	   --diff ${diff}
	   --o1 ${PePr_peaks}
           --o2 ${PePr_filtered_peaks}
           --o3 ${PePr_parameters}
	   --o4 ${PePr_peaks_diff}

	
           </command>
  <inputs>
     <repeat name="input_files" title="Input files" min="2">
            <param name="input" type="data" 
                label="input file" format="bed"
                help=""/>
	     <param name="chip" type="data" 
                label="Bed File" format="bed"
                help=""/>
    </repeat>
    <param name="expName" size="20" type="text" value="NA" label="Experirment Name"/>
    <param name="format" size="20" type="text" value="bed/txt" label="Format"/>
    <param name="peaktype"   size="20" type="text" value="sharp" label="Peak Type"/>
    <param name="t"   size="20" type="text" value="sharp" label="Threshold"/>
    <param name="remove_artefacts" type="select" label="Remove_artefacts" help="Remove peaks that are caused by PCR duplicates." >
      <option value="true">True</option>
      <option value="false">False</option>
    </param>    
    <param name="remove_duplicate" type="select" label="Remove_duplicate" help="redundant reads greater than the expected maximum (determined by a binomial test) at each single location will be removed." >
      <option value="true">True</option>
      <option value="false">False</option>
    </param>  
 <param name="diff" type="select" label="diff" help="Whether to perform differential binding analysis. If so, please provide chip2 and input2 samples as well. " >
      <option value="true">True</option>
      <option value="false">False</option>
   </param> 
  </inputs>
  <outputs>
	<data format="bed" name="PePr_peaks" label="${expName}_PePr_peaks.bed" />
	<data format="bed" name="PePr_peaks_diff" label="${expName}_up.down_PePr_peaks.bed">
		 <filter>diff == "true"</filter>
	</data>
	<data format="bed" name="PePr_filtered_peaks"  label="${expName}_PePr_filtered_peaks.txt">
	 <filter>remove_artefacts == "true"</filter>	
        </data>
	<data format="bed" name="PePr_parameters" label="${expName}_PePr_parameters.txt" />		
  </outputs>

   <configfiles>
	<configfile name="options_file">&lt;%import simplejson%&gt;	
		
	</configfile>
	</configfiles>
   <tests>
    <test>
     
    </test>
  </tests>
  <help>

For transcription factors, we recommend the following options:
python path/PePr.py -i inputFiles -c chipFiles -n ExperimentName -f format --peaktype=sharp --remove_artefacts

For histone modifications that are expected to cover large genomic regions, we recommend the following options:
python path/PePr.py -i inputFiles -c chipFiles -n ExperimentName -f format --peaktype=broad  --remove_artefacts

For differential binding analysis of transcription factors:
python path/PePr.py -i inputFiles_group1 --input2 inputFiles_group2 -c chipFiles_group1 --chip2 chipFiles_group2 -n ExperrrimentName -f format --peaktype=sharp --diff --remove_artefacts

Example of exact command for a transcription factor with two input files and two ChIP files:


python ../PePr.py -i input_rep1.bed,input_rep2.bed -c chip_rep1.bed,chip_rep2.bed -f bed -s 48,46 -w 180 -n my_test_run
</help>
</tool>
